name: Continuous Integration and Delivery

on:
  push:

env:
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/summarizer

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --no-cache \
            --tag ${{ env.IMAGE }}:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Run container
        run: |
          docker run \
            -d \
            --name fastapi-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest
      - name: List Docker images
        run: docker images
      - name: Check Pip Dependencies with pip
        run: docker exec fastapi-tdd freeze | grep flake8 || echo "flake8 is not installed"
      - name: Check Pip Dependencies with poetry
        run: docker exec fastapi-tdd poetry run pip freeze | grep flake8 || echo "flake8 is not installed"
      - name: Pre-Commit
        run: docker exec fastapi-tdd  pre-commit run --all-files
      - name: Pytest
        run: docker exec fastapi-tdd python -m pytest .


  # deploy:
  #   name: Deploy to Heroku
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   if: github.ref == 'refs/heads/main' && success()
  #   env:
  #     HEROKU_APP_NAME: glacial-badlands-39754
  #     HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/summarizer
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: main
  #     - name: Log in to GitHub Packages
  #       run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Pull image
  #       run: |
  #         docker pull ${{ env.IMAGE }}:latest || true
  #     - name: Build image
  #       run: |
  #         docker build \
  #           --cache-from ${{ env.IMAGE }}:latest \
  #           --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
  #           --file ./project/Dockerfile.prod \
  #           "./project"
  #     - name: Log in to the Heroku Container Registry
  #       run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
  #       env:
  #         HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
  #     - name: Push to the registry
  #       run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
  #     - name: Set environment variables
  #       run: |
  #         echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
  #         echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
  #     - name: Release
  #       run: |
  #         chmod +x ./release.sh
  #         ./release.sh
